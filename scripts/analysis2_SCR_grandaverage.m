%% TODO: ask heejung how generic (data paths!) + check legends line from 189 on

%% SCR grand average
% Stimulus-locked grand average. For each trial, a baseline was created by averaging 
% physiological time-series data from 3 seconds before the thermal stimulation 
% onset.  A stimulus-locked physiological response was generated by subtracting 
% the baseline value from the data in the 20-second period after the stimulation 
% onset. 
% Original code can be accessed here: https://github.com/canlab/cognitive_regulation_physiology


%--------------------------------------------------------------------------
%                             toolboxes
%--------------------------------------------------------------------------

% necessary toolboxes:
% 1. Wani Repo: https://github.com/wanirepo/wagerlabtools_supplement
% 2. CanLabCore: https://github.com/canlab/CanlabCore
% 3. Mediation toolbox: https://github.com/canlab/MediationToolbox 

%%
%---------------------------------------------------------------------------
%                       load & organize data 
%--------------------------------------------------------------------------

clear all;
close all;

% ===================== define directories ================================

%basedir = '';
%cd(basedir);

%load('../data/CRB_dataset_SCR_lpf5Hz_DS25Hz_011516.mat');

figdir = '/Users/isabelneumann/Documents/PhD/HEEJUNG';
%figdir = '../figures';

% ========================= load data =====================================

data_scl = readtable('/Users/isabelneumann/Documents/PhD/HEEJUNG/sub-all_ses-all_run-all_runtype-pain_epochstart--3_epochend-20_samplingrate-25_ttlindex-1_physio-scltimecourse.csv');
data_qc = readtable('/Users/isabelneumann/Documents/PhD/HEEJUNG/QC_EDA_new.csv')

% =============== use only participants with good quality =================

subset = data_qc(~strcmp(data_qc.SignalQuality, 'exclude'), :);

data = innerjoin(data_scl, subset, 'Keys', {'src_subject_id', 'session_id', 'param_task_name', 'param_run_num'});
rowsToRemove = isnan(data.event04_actual_angle);
data(rowsToRemove, :) = [];

% ====================== define parameters ================================

sampling_rate = 25;
epoch_start = -3;
epoch_end = 20;
baseline_timepoint = abs(epoch_start)*sampling_rate;
total_timepoint = abs(epoch_end-epoch_start)*sampling_rate;

% ====================== define conditions ================================

data.temp(categorical(data.param_stimulus_type) == 'low_stim') = 48;
data.temp(categorical(data.param_stimulus_type) == 'high_stim') = 49;
data.temp(categorical(data.param_stimulus_type) == 'med_stim') = 50;

data.cond(categorical(data.param_task_name) == 'pain') = 1;
data.cue(categorical(data.param_cue_type) == 'high_cue') = 1;
data.cue(categorical(data.param_cue_type) == 'low_cue') = -1;

% ================ define subjects with full data set =====================

sub_list = unique(data.src_subject_id);
sub_list_clean = sub_list(~isnan(sub_list));

for i = 1:numel(sub_list_clean)
    y_int{i} = data.event04_actual_angle(data.src_subject_id == sub_list_clean(i)); % intensity rating
    y_exp{i} = data.event02_expect_angle(data.src_subject_id == sub_list_clean(i)); % unpleasantness (bipolar) -> spacetop: expectation rating
    cue{i} = data.cue(data.src_subject_id == sub_list_clean(i)); 
    temp{i} = data.temp(data.src_subject_id == sub_list_clean(i));
end

%%
%--------------------------------------------------------------------------
%                  calculate subject mean per condition
%--------------------------------------------------------------------------

u_temp = unique(temp{1});
u_cue = unique(cue{1});
dat_int = {};
dat_exp = {};
for subj = 1:numel(temp)
    for i = 1:numel(u_temp)
        for j = 1:numel(u_cue)
            dat_int{i,j}(subj,1) = nanmean(y_int{subj}(temp{subj}==u_temp(i) & cue{subj}==u_cue(j)));
            dat_exp{i,j}(subj,1) = nanmean(y_exp{subj}(temp{subj}==u_temp(i) & cue{subj}==u_cue(j)));
        end
    end
end

% ===================== get the column indices ============================

startColumn = 'time_0';
endColumn = 'time_574';

startIndex = find(strcmp(data.Properties.VariableNames, startColumn));
endIndex = find(strcmp(data.Properties.VariableNames, endColumn));

temp_list = {'low_stim', 'med_stim', 'high_stim'};
cue_list = {'low_cue', 'high_cue'};

% ==================== specify number of subjects =========================

numSubjects = length(sub_list_clean);
signal = cell(1, numSubjects);

% ======================== loop over subjects =============================

for i = 1:numSubjects % initialize the cond structure for each subject
    signal{i}.cond = cell(3, 2);
end

for j =  1:numel(sub_list_clean)
    for t  = 1:length(temp_list)
        for c = 1:length(cue_list)
            signal{1,j}.cond{t, c}(:,:) =  table2array(data(data.src_subject_id == sub_list_clean(j) &  strcmp(data.param_cue_type,cue_list(c)) &  strcmp(data.param_stimulus_type,temp_list(t)), startIndex:endIndex));
            % get data for 23 seconds
        end
    end
end

% ======================== baseline correction ============================

clear signal_m;
k = 0;

for i = 1:length(temp_list) % temperature: 48, 49, 50
    for j = 1:length(cue_list) % cue condition: low cue, high cue
        k = k + 1;
        for subj = 1:numel(signal)
            signal_m{i,j}(subj,:) = nanmean(signal{subj}.cond{i,j} - repmat(mean(signal{subj}.cond{i,j}(:,1:baseline_timepoint),2), 1, size(signal{subj}.cond{i,j},2))); 
            % subtracting the baseline, and then average
        end
    end
end

%%
%--------------------------------------------------------------------------
%                  grand average method illustration 
%--------------------------------------------------------------------------

% ============================== step 1 ===================================

create_figure('grand average');

colormap('default');
cmap = colormap;

for i = 1:numSubjects 
    hold on;
    plot(signal{i}.cond{3,1}', 'LineWidth', 1, 'color', cmap(round(i*1.5),:)); % 3 temperature levels
end

set(gcf, 'position', [360   108   306   590]);
set(gca, 'TickDir', 'out', 'linewidth', 1.5, 'xtick', [0 75:125:600], 'XTickLabel', [-3 0:5:20], 'ylim', [0 32]);

savename = fullfile(figdir, 'grandaverage_step1_cond3_1.pdf');
pagesetup(gcf);
saveas(gcf, savename);

pagesetup(gcf);
saveas(gcf, savename);
%% 
% ============================== step 2 ===================================

create_figure('grand average');
hold on;

for i = 1:numSubjects 
    hold on;
    plot(signal_m{3,1}(i,:)', 'LineWidth', 1.5, 'color', cmap(round(i*1.5),:)); % 3 temperature levels
end
set(gcf, 'position', [360   477   306   221]);
set(gca, 'TickDir', 'out', 'TickLength', [.02 .02], 'linewidth', 1.5, 'xtick', [0 75:125:600], 'XTickLabel', [-3 0:5:20], 'ylim', [-1 4.5]);
savename = fullfile(figdir, 'grandaverage_step2.pdf');
pagesetup(gcf);
saveas(gcf, savename);

pagesetup(gcf);
saveas(gcf, savename);
%% 
% ============================== step 3 ===================================

create_figure('grand average');
hold on;

wani_plot_shading(1:numel(mean(signal_m{3,1})), mean(signal_m{3,1}), ste(signal_m{3,1}), 'color', 'k', 'color_shade', [.8 .8 .8]);

set(gcf, 'position', [360   477   306   221]);
set(gca, 'TickDir', 'out', 'TickLength', [.02 .02], 'linewidth', 1.5, 'xtick', [0 75:125:600], 'XTickLabel', [-3 0:5:20], 'ylim', [-.1 1.2]);
xlabel('Time (seconds)');
ylabel('Grand average amplitude');
savename = fullfile(figdir, 'grandaverage_step3.pdf');
pagesetup(gcf);
saveas(gcf, savename);

pagesetup(gcf);
saveas(gcf, savename);

%%
%--------------------------------------------------------------------------
%                        each temperature level 
%--------------------------------------------------------------------------

close all;

temp = {'48', '49', '50'};

% you can change this value
j = 2; % 49 celcius degree 
x = 1:575;
create_figure('shading');
cols = [0.3333    0.6588    1.0000
    0         0         0
    0.7608    0.3020         0];

for i = 1:2 
    hold on;
    plot(x, mean(signal_m{j,i}), 'color', cols(i,:), 'linewidth', 2);
end

set(gcf, 'position', [50   126   661   324]);
set(gca, 'ylim', [-.3 1], 'linewidth', 1.5, 'TickDir', 'out', 'TickLength', [.02 .02], 'Xtick', (0:3:24)*25);
set(gca, 'XTickLabel', get(gca, 'XTick')./25-3);
h = legend('low cue', 'high cue'); 
set(h, 'fontsize', 15, 'box', 'off', 'Location', 'northeastoutside');
xlabel('Time (seconds)');
ylabel('Grand average amplitude');

%%
%--------------------------------------------------------------------------
%               SCR grand averages for all temperature levels
%--------------------------------------------------------------------------

close all;

x = 1:575;
create_figure('shading');
cols = [0.9922    0.8314    0.6196
    0.9922    0.7333    0.5176
    0.9882    0.5529    0.3490
    0.9373    0.3961    0.2824
    0.8431    0.1882    0.1216
    0.6000         0         0];

for i = (3:5:24)*25 %TODO: check with Heejung
    line([i i], [-.3 1], 'col', [.8 .8 .8], 'linewidth', 1);
end

for i = 1:3 
    hold on;
    wani_plot_shading(x, mean(cat(1,signal_m{i,:})), ste(cat(1,signal_m{i,:})), 'color', cols(i,:), 'alpha', .2);

end

set(gcf, 'position', [50   126   549   324]);
set(gca, 'ylim', [-.3 1], 'linewidth', 1.5, 'TickDir', 'out', 'TickLength', [.02 .02], 'Xtick', (3:5:24)*25, 'ytick', -.2:.2:1);
set(gca, 'XTickLabel', get(gca, 'XTick')./25-3);
set(gca, 'fontSize', 25);
h = legend('', '', '', '', '', '', '48°C', '', '49°C', '', '50°C'); 
xlabel('Time (seconds)');
ylabel('Grand average amplitude');

savename = fullfile(figdir, 'Temp_all_grandavg_full.pdf');

pagesetup(gcf);
saveas(gcf, savename);

pagesetup(gcf);
saveas(gcf, savename);

%%
%--------------------------------------------------------------------------
%                           cue average over temp 
%--------------------------------------------------------------------------

close all;

x = 1:575; 
create_figure('shading');
cols = [0.3333    0.6588    1.0000
    0         0         0
    0.7608    0.3020         0];

for i = 1:2
    hold on;
    wani_plot_shading(x, mean(cat(1,signal_m{:,i})), ste(cat(1,signal_m{:,i})), 'color', cols(i,:), 'alpha', .2);
end

set(gcf, 'position', [50   126   522   324]);
set(gca, 'ylim', [-.3 1], 'linewidth', 1.5, 'TickDir', 'out', 'TickLength', [.02 .02], 'Xtick', (3:5:24)*25, 'ytick', -.2:.2:1);
set(gca, 'XTickLabel', get(gca, 'XTick')./25-3);
set(gca, 'fontSize', 15);
h = legend(); 
xlabel('Time (seconds)');
ylabel('Grand average amplitude');

%%
%--------------------------------------------------------------------------
%        stat tests with peak amplitude and area-under-the-curve 
%--------------------------------------------------------------------------

% ================== step 1: baseline-to-peak amplitude ===================

yy_max_temp = cellfun(@(x) max(x(:,76:575)')', signal_m, 'Uniformoutput', false);
clear xx; 

temp = repmat(1:3, 1, 2)'; % 3 temperature levels
cue = [ones(3,1)*-1; ones(3,1)*1]; % 2 cue levels

for i = 1:numel(yy_max_temp{1})
    xx{i} = [temp cue scale(temp,1).*scale(cue,1)];

    k = 0;
    for j = 1:2
        for jj = 1:3
            k = k + 1;
            yy_max{i}(k,1) = yy_max_temp{jj,j}(i);
        end
    end
end

glm_scr_max = glmfit_multilevel(yy_max, xx, [], 'names', {'intcp', 'temp', 'cue', 'intera'}, ...
     'verbose', 'boot', 'nresample', 10000);
%%
% ===================== step 2: area-under-the-curve ====================== 

yy_sum_temp = cellfun(@(x) sum(x(:,76:575),2), signal_m, 'Uniformoutput', false);

temp = repmat(1:3, 1, 2)'; % 3 temperature levels
cue = [ones(3,1)*-1; ones(3,1)*1]; % 2 cue levels

for i = 1:numel(yy_sum_temp{1})
    xx{i} = [temp cue scale(temp,1).*scale(cue,1)];

    k = 0;
    for j = 1:2 
        for jj = 1:3 
            k = k + 1;
            yy_sum{i}(k,1) = yy_sum_temp{jj,j}(i);
        end
    end
end

glm_scr_sum = glmfit_multilevel(yy_sum, xx, [], 'names', {'intcp', 'temp', 'cue', 'intera'}, ... 
     'verbose', 'boot', 'nresample', 10000);
%% 
% ============= step 3: plot for baseline-to-peak amplitude =============== 

cue_all{1} = cat(2,yy_max_temp{:,1})';
cue_all{2} = cat(2,yy_max_temp{:,2})';

x = 48:1:50;  
y = [mean(cue_all{1},2) mean(cue_all{2},2)];
se = repmat(barplot_get_within_ste([cue_all{1}; cue_all{2}]'), 3, 2);

create_figure('plot');
set(gcf, 'position', [360   438   368   260]);

col = [0.3333    0.6588    1.0000
       0         0         0
       0.7608    0.3020    0];

for i = 1:2 
    hold on;
    h = errorbar(x, y(:,i), se(:,i), 'color', col(i,:), 'linewidth', 2); %, 'markersize', 4, 'markerfacecolor', col(i,:));
    h.CapSize = 0;
end

set(gca, 'xlim', [47.8 50.8], 'linewidth', 2, 'xtick', 48:50, 'tickdir',...
    'out', 'ticklength', [.02 .02], 'ytick', 0:.2:1.2, 'ylim',[0 1.3]);

h = legend('low cue', 'high cue');
xlabel('temperature', 'fontsize', 22);
ylabel('baseline-to-peak amplitude', 'fontsize', 22);

set(gca, 'fontsize', 22);
%% 
% =========== step 4: plot for area under the curve amplitude =============

cue_all{1} = cat(2,yy_max_temp{:,1})';
cue_all{2} = cat(2,yy_max_temp{:,2})';

x = 48:1:50; 
y = [mean(cue_all{1},2) mean(cue_all{2},2)];
se = repmat(barplot_get_within_ste([cue_all{1}; cue_all{2}]'), 3, 2);

create_figure('plot');
set(gcf, 'position', [360   438   368   260]);

col = [0.3333    0.6588    1.0000
       0         0         0
       0.7608    0.3020    0];

for i = 1:2
    hold on;
    h = errorbar(x, y(:,i), se(:,i), 'color', col(i,:), 'linewidth', 2);
    h.CapSize = 0;
end

set(gca, 'xlim', [47.8 50.8], 'linewidth', 2, 'xtick', 48:50, 'tickdir',...
    'out', 'ticklength', [.02 .02], 'ytick', 0:.2:1.2, 'ylim',[0 1.3]);

%h = legend('low cue', 'high cue'); %TODO: check with Heejung
h = legend(); %TODO: check with Heejung
xlabel('temperature', 'fontsize', 22);
ylabel('area-under-the-curve amplitude', 'fontsize', 22);

set(gca, 'fontsize', 22);